parameters
{
    mask float(-1.0)
	color Vec4(1.0,1.0,1.0,1.0)
	diffuse_texture texture("example")
}

sub_effect
{
	/* ALL
    requirement
    {
        driver  OpenGL(4,1)
        shader  GLSL(410)
    }
    */
	
    technique "forward"
    {
        pass 
        {
            zbuffer less
            blend off
            cullface front
            lights off
            shader source 
            {
                ////////////////
                #include <Camera>
                #include <Transform>
                #include <Vertex>
                #include <Support>
                #include <Matrix>
                ////////////////
                struct VertexShaderOutput
                {
                    Vec4 m_position : SV_POSITION;  // interpolated vertex position (system value)
                    Vec2 m_uv       : NORMAL0;      // interpolated uv map
                };

                //global uniform
                float mask;
                Vec4 color;
				
				//texture
				Sampler2D(diffuse_texture);

                VertexShaderOutput vertex(Position3DNormalUV input) 
                {
                    VertexShaderOutput output;
                    output.m_position = mul_model_view_projection(input.m_position);
                    output.m_uv = input.m_uv;
                    return output;
                }


                Vec4 fragment(VertexShaderOutput input) : SV_TARGET
                {
                  Vec4 texture_color = texture2D(diffuse_texture,input.m_uv);
                  if (texture_color.a <= mask) discard;
                  return  color * Vec4(texture_color.rgb,1.0);
                }
            }
        }
    }
}
