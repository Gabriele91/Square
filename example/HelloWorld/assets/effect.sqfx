parameters
{
    mask float(-1.0)
	color Vec4(1.0,1.0,1.0,1.0)
	diffuse_map texture("none")
}

sub_effect
{
	/* ALL
    requirement
    {
        driver  OpenGL(4,1)
        shader  GLSL(410)
    }
    */
	
    technique "forward"
    {
        pass 
        {
            zbuffer less
            blend off
            cullface front
            lights off
            shader source 
            {
                ////////////////
				#define FORWARD_RENDERING
                ////////////////
                #include <Camera>
                #include <Transform>
                #include <Vertex>
                #include <Support>
                #include <Matrix>
                #include <Surface>
                ////////////////
                struct VertexShaderOutput
                {
                    Vec4 m_position : SV_POSITION;  // interpolated vertex position (system value)
                    Vec2 m_uv       : TEXCOORD0;    // interpolated uv map
                };

                //global uniform
                float mask;
                Vec4 color;
				
				//texture
				Sampler2D(diffuse_map);

                VertexShaderOutput vertex(Position3DNormalUV input) 
                {
                    VertexShaderOutput output;
                    output.m_position = mul_model_view_projection(input.m_position);
                    output.m_uv = input.m_uv;
                    return output;
                }

				surface(VertexShaderOutput input)
				{
					Vec4 texcolor = texture2D(diffuse_map,input.m_uv);
					if (texcolor.a <= mask) discard;

					SurfaceData data = DefaultSurfaceData();
					data.m_position = input.m_position.rgb;
					data.m_albedo = color.rgb * texcolor.rgb;
					data.m_alpha = color.a * texcolor.a;
					surface_return(data);
				}
            }
        }
    }
}
