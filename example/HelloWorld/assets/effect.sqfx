parameters
{
    mask float(-1.0)
	color Vec4(1.0,1.0,1.0,1.0)
}

sub_effect
{
	/* ALL
    requirement
    {
        driver  OpenGL(4,1)
        shader  GLSL(410)
    }
    */
	
    technique "forward"
    {
        pass 
        {
            zbuffer less
            blend off
            cullface back
            lights off
            shader source 
            {
                struct VertexShaderInput
                {
                    Vec3 m_position : POSITION;
                    Vec3 m_color    : COLOR0;
                };

                struct VertexShaderOutput
                {
                    Vec4 m_position : SV_POSITION;  // interpolated vertex position (system value)
                    Vec4 m_color    : COLOR0;       // interpolated diffuse color
                };

                cbuffer Camera : register(b0)
                {
                    Vec4 camera_viewport;
                    Mat4 camera_projection;
                    Mat4 camera_view;
                    Mat4 camera_model;
                    Vec3 camera_position;
                };

                cbuffer Transform : register(b1)
                {
                    Mat4 model_model;
                    Vec3 model_position;
                    Vec3 model_scale;
                    Mat3 model_rotation;
                };

                //global uniform
                float mask;
                Vec4 color;

                VertexShaderOutput vertex(VertexShaderInput input) 
                {    

                    Vec4 position = Vec4(input.m_position, 1.0f);
                    position = mul(position, model_model);
                    position = mul(position, camera_view);
                    position = mul(position, camera_projection);
                    VertexShaderOutput output;
                    output.m_position = position;
                    output.m_color = Vec4(input.m_color.rgb, 1.0f);

                    return output;
                }

                Vec4 fragment(VertexShaderOutput input) : SV_TARGET 
                {   
                    if (input.m_color.a <= mask) discard;
                    return input.m_color * color;
                }
            }
        }
    }
}
